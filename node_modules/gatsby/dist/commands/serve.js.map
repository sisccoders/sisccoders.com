{"version":3,"file":"serve.js","names":["onExit","telemetry","trackCli","readMatchPaths","program","filePath","path","join","directory","rawJSON","fs","readFile","error","report","warn","chalk","bold","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","reachMatch","sendFile","err","module","exports","startBackgroundUpdate","initTracer","process","env","GATSBY_OPEN_TRACING_CONFIG_FILE","openTracingConfigFile","prefixPaths","port","open","host","parseInt","configModule","getConfigFile","config","preferDefault","pathPrefix","configPathPrefix","trailingSlash","root","app","express","partytownProxiedURLs","use","thirdPartyProxyPath","partytownProxy","router","Router","expressMiddleware","compression","configureTrailingSlash","pages","get","pathName","getDataStore","getNode","values","iterateNodesByType","static","dotfiles","compiledFunctionsDir","functions","readFileSync","e","functionMiddlewaresInstances","functionMiddlewares","getFunctions","GraphQLEngine","require","getData","renderPageData","renderHTML","graphqlEngine","dbPath","requestedPagePath","params","pagePath","potentialPagePath","reverseFixedPagePath","page","findPageByPath","mode","requestActivity","phantomActivity","start","spanContext","span","context","data","results","serverDataHeaders","name","value","Object","entries","setHeader","serverDataStatus","status","send","contentType","end","_","header","printInstructions","appName","urls","console","log","lanUrlForTerminal","localUrlForTerminal","startListening","listen","prepareUrls","ssl","sitePackageJson","info","Promise","resolve","openurl","localUrlForBrowser","catch","detectPortInUseAndPrompt","message"],"sources":["../../src/commands/serve.ts"],"sourcesContent":["import path from \"path\"\nimport openurl from \"better-opn\"\nimport fs from \"fs-extra\"\nimport compression from \"compression\"\nimport express from \"express\"\nimport chalk from \"chalk\"\nimport { match as reachMatch } from \"@gatsbyjs/reach-router\"\nimport onExit from \"signal-exit\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport { preferDefault } from \"../bootstrap/prefer-default\"\nimport { IProgram } from \"./types\"\nimport { IPreparedUrls, prepareUrls } from \"../utils/prepare-urls\"\nimport {\n  IGatsbyConfig,\n  IGatsbyFunction,\n  IGatsbyPage,\n  IGatsbyState,\n} from \"../redux/types\"\nimport { reverseFixedPagePath } from \"../utils/page-data\"\nimport { initTracer } from \"../utils/tracer\"\nimport { configureTrailingSlash } from \"../utils/express-middlewares\"\nimport { getDataStore } from \"../datastore\"\nimport { functionMiddlewares } from \"../internal-plugins/functions/middleware\"\nimport {\n  thirdPartyProxyPath,\n  partytownProxy,\n} from \"../internal-plugins/partytown/proxy\"\n\ninterface IMatchPath {\n  path: string\n  matchPath: string\n}\n\ninterface IServeProgram extends IProgram {\n  prefixPaths: boolean\n}\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async (\n  program: IServeProgram\n): Promise<Array<IMatchPath>> => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  let rawJSON = `[]`\n  try {\n    rawJSON = await fs.readFile(filePath, `utf8`)\n  } catch (error) {\n    report.warn(error)\n    report.warn(\n      `Could not read ${chalk.bold(\n        `match-paths.json`\n      )} from the .cache directory`\n    )\n    report.warn(\n      `Client-side routing will not work correctly. Maybe you need to re-run ${chalk.bold(\n        `gatsby build`\n      )}?`\n    )\n  }\n  return JSON.parse(rawJSON) as Array<IMatchPath>\n}\n\nconst matchPathRouter =\n  (\n    matchPaths: Array<IMatchPath>,\n    options: {\n      root: string\n    }\n  ) =>\n  (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const matchPath = matchPaths.find(\n        ({ matchPath }) => reachMatch(matchPath, url) !== null\n      )\n      if (matchPath) {\n        return res.sendFile(\n          path.join(matchPath.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n\nmodule.exports = async (program: IServeProgram): Promise<void> => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  await initTracer(\n    process.env.GATSBY_OPEN_TRACING_CONFIG_FILE || program.openTracingConfigFile\n  )\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const { configModule } = await getConfigFile(\n    program.directory,\n    `gatsby-config`\n  )\n  const config: IGatsbyConfig = preferDefault(configModule)\n\n  const { pathPrefix: configPathPrefix, trailingSlash } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n\n  // Proxy gatsby-script using off-main-thread strategy\n  const { partytownProxiedURLs = [] } = config || {}\n\n  app.use(thirdPartyProxyPath, partytownProxy(partytownProxiedURLs))\n\n  // eslint-disable-next-line new-cap\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n\n  router.use(\n    configureTrailingSlash(\n      () =>\n        ({\n          pages: {\n            get(pathName: string): IGatsbyPage | undefined {\n              return getDataStore().getNode(`SitePage ${pathName}`) as\n                | IGatsbyPage\n                | undefined\n            },\n            values(): Iterable<IGatsbyPage> {\n              return getDataStore().iterateNodesByType(\n                `SitePage`\n              ) as Iterable<IGatsbyPage>\n            },\n          },\n        } as unknown as IGatsbyState),\n      trailingSlash\n    )\n  )\n\n  router.use(express.static(`public`, { dotfiles: `allow` }))\n\n  const compiledFunctionsDir = path.join(\n    program.directory,\n    `.cache`,\n    `functions`\n  )\n\n  let functions: Array<IGatsbyFunction> = []\n  try {\n    functions = JSON.parse(\n      fs.readFileSync(path.join(compiledFunctionsDir, `manifest.json`), `utf-8`)\n    )\n  } catch (e) {\n    // ignore\n  }\n\n  if (functions) {\n    const functionMiddlewaresInstances = functionMiddlewares({\n      getFunctions(): Array<IGatsbyFunction> {\n        return functions\n      },\n    })\n\n    router.use(`/api/*`, ...functionMiddlewaresInstances)\n    // TODO(v6) remove handler from app and only keep it on router (router is setup on pathPrefix, while app is always root)\n    app.use(`/api/*`, ...functionMiddlewaresInstances)\n  }\n\n  // Handle SSR & DSG Pages\n  try {\n    const { GraphQLEngine } = require(path.join(\n      program.directory,\n      `.cache`,\n      `query-engine`\n    )) as typeof import(\"../schema/graphql-engine/entry\")\n    const { getData, renderPageData, renderHTML } = require(path.join(\n      program.directory,\n      `.cache`,\n      `page-ssr`\n    )) as typeof import(\"../utils/page-ssr-module/entry\")\n    const graphqlEngine = new GraphQLEngine({\n      dbPath: path.join(program.directory, `.cache`, `data`, `datastore`),\n    })\n\n    router.get(\n      `/page-data/:pagePath(*)/page-data.json`,\n      async (req, res, next) => {\n        const requestedPagePath = req.params.pagePath\n        if (!requestedPagePath) {\n          return void next()\n        }\n\n        const potentialPagePath = reverseFixedPagePath(requestedPagePath)\n        const page = graphqlEngine.findPageByPath(potentialPagePath)\n\n        if (page && (page.mode === `DSG` || page.mode === `SSR`)) {\n          const requestActivity = report.phantomActivity(\n            `request for \"${req.path}\"`\n          )\n          requestActivity.start()\n          try {\n            const spanContext = requestActivity.span.context()\n            const data = await getData({\n              pathName: req.path,\n              graphqlEngine,\n              req,\n              spanContext,\n            })\n            const results = await renderPageData({ data, spanContext })\n            if (data.serverDataHeaders) {\n              for (const [name, value] of Object.entries(\n                data.serverDataHeaders\n              )) {\n                res.setHeader(name, value)\n              }\n            }\n\n            if (page.mode === `SSR` && data.serverDataStatus) {\n              return void res.status(data.serverDataStatus).send(results)\n            } else {\n              return void res.send(results)\n            }\n          } catch (e) {\n            report.error(\n              `Generating page-data for \"${requestedPagePath}\" / \"${potentialPagePath}\" failed.`,\n              e\n            )\n            return res\n              .status(500)\n              .contentType(`text/plain`)\n              .send(`Internal server error.`)\n          } finally {\n            requestActivity.end()\n          }\n        }\n\n        return void next()\n      }\n    )\n\n    router.use(async (req, res, next) => {\n      if (req.accepts(`html`)) {\n        const potentialPagePath = req.path\n        const page = graphqlEngine.findPageByPath(potentialPagePath)\n        if (page && (page.mode === `DSG` || page.mode === `SSR`)) {\n          const requestActivity = report.phantomActivity(\n            `request for \"${req.path}\"`\n          )\n          requestActivity.start()\n\n          try {\n            const spanContext = requestActivity.span.context()\n            const data = await getData({\n              pathName: potentialPagePath,\n              graphqlEngine,\n              req,\n              spanContext,\n            })\n            const results = await renderHTML({ data, spanContext })\n            if (data.serverDataHeaders) {\n              for (const [name, value] of Object.entries(\n                data.serverDataHeaders\n              )) {\n                res.setHeader(name, value)\n              }\n            }\n\n            if (page.mode === `SSR` && data.serverDataStatus) {\n              return void res.status(data.serverDataStatus).send(results)\n            } else {\n              return void res.send(results)\n            }\n          } catch (e) {\n            report.error(`Rendering html for \"${potentialPagePath}\" failed.`, e)\n            return res.status(500).sendFile(`500.html`, { root }, err => {\n              if (err) {\n                res.contentType(`text/plain`).send(`Internal server error.`)\n              }\n            })\n          } finally {\n            requestActivity.end()\n          }\n        }\n      }\n      return next()\n    })\n  } catch (error) {\n    // TODO: Handle case of engine not being generated\n  }\n\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n\n  // TODO: Remove/merge with above same block\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function (\n    _: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  function printInstructions(appName: string, urls: IPreparedUrls): void {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n  }\n\n  const startListening = (): void => {\n    app.listen(port, host, () => {\n      const urls = prepareUrls(\n        program.ssl ? `https` : `http`,\n        program.host,\n        port\n      )\n      printInstructions(\n        program.sitePackageJson.name || `(Unnamed package)`,\n        urls\n      )\n      if (open) {\n        report.info(`Opening browser...`)\n        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(() =>\n          report.warn(`Browser not opened because no browser was found`)\n        )\n      }\n    })\n  }\n\n  try {\n    port = await detectPortInUseAndPrompt(port, program.host)\n    startListening()\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      return\n    }\n\n    throw e\n  }\n}\n"],"mappings":"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"}