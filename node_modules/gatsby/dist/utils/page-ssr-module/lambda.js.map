{"version":3,"file":"lambda.js","names":["cdnDatastore","setupFsWrapper","fs","accessSync","__filename","constants","W_OK","path","join","__dirname","e","TEMP_CACHE_DIR","tmpdir","cacheDir","rewrites","console","log","from","to","lfs","link","key","Object","hasOwnProperty","call","native","dbPath","promises","global","_fsWrapper","dir","process","env","NETLIFY_LOCAL","existsSync","copySync","GraphQLEngine","require","getData","renderPageData","renderHTML","streamPipeline","promisify","pipeline","get","url","callback","URL","protocol","httpsGet","httpGet","getEngine","downloadPath","ensureDir","Promise","resolve","reject","req","response","statusCode","Error","statusMessage","fileStream","createWriteStream","then","catch","error","on","graphqlEngine","ready","engineReadyPromise","reverseFixedPagePath","pageDataRequestPath","getPathInfo","matches","matchAll","requestedPagePath","isPageData","pagePath","setStatusAndHeaders","page","data","res","mode","serverDataStatus","status","serverDataHeaders","name","value","entries","setHeader","getErrorBody","body","filename","cwd","readFileSync","engineHandler","pathInfo","send","findPageByPath","pathName","results","json"],"sources":["../../../src/utils/page-ssr-module/lambda.ts"],"sourcesContent":["import type { GatsbyFunctionResponse, GatsbyFunctionRequest } from \"gatsby\"\nimport * as path from \"path\"\nimport * as fs from \"fs-extra\"\nimport { get as httpsGet } from \"https\"\nimport { get as httpGet, IncomingMessage, ClientRequest } from \"http\"\nimport { tmpdir } from \"os\"\nimport { pipeline } from \"stream\"\nimport { URL } from \"url\"\nimport { promisify } from \"util\"\n\nimport type { IGatsbyPage } from \"../../internal\"\nimport type { ISSRData } from \"./entry\"\nimport { link } from \"linkfs\"\n\nconst cdnDatastore = `%CDN_DATASTORE_PATH%`\n\nfunction setupFsWrapper(): string {\n  // setup global._fsWrapper\n  try {\n    fs.accessSync(__filename, fs.constants.W_OK)\n    // TODO: this seems funky - not sure if this is correct way to handle this, so just marking TODO to revisit this\n    return path.join(__dirname, `..`, `data`, `datastore`)\n  } catch (e) {\n    // we are in a read-only filesystem, so we need to use a temp dir\n\n    const TEMP_CACHE_DIR = path.join(tmpdir(), `gatsby`, `.cache`)\n\n    // TODO: don't hardcode this\n    const cacheDir = `/var/task/.cache`\n\n    // we need to rewrite fs\n    const rewrites = [\n      [path.join(cacheDir, `caches`), path.join(TEMP_CACHE_DIR, `caches`)],\n      [\n        path.join(cacheDir, `caches-lmdb`),\n        path.join(TEMP_CACHE_DIR, `caches-lmdb`),\n      ],\n      [path.join(cacheDir, `data`), path.join(TEMP_CACHE_DIR, `data`)],\n    ]\n\n    console.log(`Preparing Gatsby filesystem`, {\n      from: cacheDir,\n      to: TEMP_CACHE_DIR,\n      rewrites,\n    })\n    // Alias the cache dir paths to the temp dir\n    const lfs = link(fs, rewrites) as typeof import(\"fs\")\n\n    // linkfs doesn't pass across the `native` prop, which graceful-fs needs\n    for (const key in lfs) {\n      if (Object.hasOwnProperty.call(fs[key], `native`)) {\n        lfs[key].native = fs[key].native\n      }\n    }\n\n    const dbPath = path.join(TEMP_CACHE_DIR, `data`, `datastore`)\n\n    // 'promises' is not initially linked within the 'linkfs'\n    // package, and is needed by underlying Gatsby code (the\n    // @graphql-tools/code-file-loader)\n    lfs.promises = link(fs.promises, rewrites)\n\n    // Gatsby uses this instead of fs if present\n    // eslint-disable-next-line no-underscore-dangle\n    global._fsWrapper = lfs\n\n    if (!cdnDatastore) {\n      const dir = `data`\n      if (\n        !process.env.NETLIFY_LOCAL &&\n        fs.existsSync(path.join(TEMP_CACHE_DIR, dir))\n      ) {\n        console.log(`directory already exists`)\n        return dbPath\n      }\n      console.log(`Start copying ${dir}`)\n\n      fs.copySync(path.join(cacheDir, dir), path.join(TEMP_CACHE_DIR, dir))\n      console.log(`End copying ${dir}`)\n    }\n\n    return dbPath\n  }\n}\n\nconst dbPath = setupFsWrapper()\n\n// using require instead of import here for now because of type hell + import path doesn't exist in current context\n// as this file will be copied elsewhere\n\ntype GraphQLEngineType =\n  import(\"../../schema/graphql-engine/entry\").GraphQLEngine\n\nconst { GraphQLEngine } =\n  require(`../query-engine`) as typeof import(\"../../schema/graphql-engine/entry\")\n\nconst { getData, renderPageData, renderHTML } =\n  require(`./index`) as typeof import(\"./entry\")\n\nconst streamPipeline = promisify(pipeline)\n\nfunction get(\n  url: string,\n  callback?: (res: IncomingMessage) => void\n): ClientRequest {\n  return new URL(url).protocol === `https:`\n    ? httpsGet(url, callback)\n    : httpGet(url, callback)\n}\n\nasync function getEngine(): Promise<GraphQLEngineType> {\n  if (cdnDatastore) {\n    // if this variable is set we need to download the datastore from the CDN\n    const downloadPath = dbPath + `/data.mdb`\n    console.log(\n      `Downloading datastore from CDN (${cdnDatastore} -> ${downloadPath})`\n    )\n\n    await fs.ensureDir(dbPath)\n    await new Promise((resolve, reject) => {\n      const req = get(cdnDatastore, response => {\n        if (\n          !response.statusCode ||\n          response.statusCode < 200 ||\n          response.statusCode > 299\n        ) {\n          reject(\n            new Error(\n              `Failed to download ${cdnDatastore}: ${response.statusCode} ${\n                response.statusMessage || ``\n              }`\n            )\n          )\n          return\n        }\n\n        const fileStream = fs.createWriteStream(downloadPath)\n        streamPipeline(response, fileStream)\n          .then(resolve)\n          .catch(error => {\n            console.log(`Error downloading ${cdnDatastore}`, error)\n            reject(error)\n          })\n      })\n\n      req.on(`error`, error => {\n        console.log(`Error downloading ${cdnDatastore}`, error)\n        reject(error)\n      })\n    })\n  }\n  console.log(`Downloaded datastore from CDN`)\n\n  const graphqlEngine = new GraphQLEngine({\n    dbPath,\n  })\n\n  await graphqlEngine.ready\n\n  return graphqlEngine\n}\n\nconst engineReadyPromise = getEngine()\n\nfunction reverseFixedPagePath(pageDataRequestPath: string): string {\n  return pageDataRequestPath === `index` ? `/` : pageDataRequestPath\n}\n\nfunction getPathInfo(req: GatsbyFunctionRequest):\n  | {\n      isPageData: boolean\n      pagePath: string\n    }\n  | undefined {\n  // @ts-ignore GatsbyFunctionRequest.path is not in types ... there is no property in types that can be used to get a path currently\n  const matches = req.url.matchAll(/^\\/?page-data\\/(.+)\\/page-data.json$/gm)\n  for (const [, requestedPagePath] of matches) {\n    return {\n      isPageData: true,\n      pagePath: reverseFixedPagePath(requestedPagePath),\n    }\n  }\n\n  // if not matched\n  return {\n    isPageData: false,\n    // @ts-ignore GatsbyFunctionRequest.path is not in types ... there is no property in types that can be used to get a path currently\n    pagePath: req.url,\n  }\n}\n\nfunction setStatusAndHeaders({\n  page,\n  data,\n  res,\n}: {\n  page: IGatsbyPage\n  data: ISSRData\n  res: GatsbyFunctionResponse\n}): void {\n  if (page.mode === `SSR`) {\n    if (data.serverDataStatus) {\n      res.status(data.serverDataStatus)\n    }\n  }\n  if (data.serverDataHeaders) {\n    for (const [name, value] of Object.entries(data.serverDataHeaders)) {\n      res.setHeader(name, value)\n    }\n  }\n}\n\nfunction getErrorBody(statusCode: number): string {\n  let body = `<html><body><h1>${statusCode}</h1><p>${\n    statusCode === 404 ? `Not found` : `Internal Server Error`\n  }</p></body></html>`\n\n  if (statusCode === 404 || statusCode === 500) {\n    const filename = path.join(process.cwd(), `public`, `${statusCode}.html`)\n\n    if (fs.existsSync(filename)) {\n      body = fs.readFileSync(filename, `utf8`)\n    }\n  }\n\n  return body\n}\n\nasync function engineHandler(\n  req: GatsbyFunctionRequest,\n  res: GatsbyFunctionResponse\n): Promise<void> {\n  try {\n    const graphqlEngine = await engineReadyPromise\n    const pathInfo = getPathInfo(req)\n    if (!pathInfo) {\n      res.status(404).send(getErrorBody(404))\n      return\n    }\n\n    const { isPageData, pagePath } = pathInfo\n\n    const page = graphqlEngine.findPageByPath(pagePath)\n    if (!page) {\n      res.status(404).send(getErrorBody(404))\n      return\n    }\n\n    const data = await getData({\n      pathName: pagePath,\n      graphqlEngine,\n      req,\n    })\n\n    if (isPageData) {\n      const results = await renderPageData({ data })\n      setStatusAndHeaders({ page, data, res })\n      res.json(results)\n      return\n    } else {\n      const results = await renderHTML({ data })\n      setStatusAndHeaders({ page, data, res })\n      res.send(results)\n      return\n    }\n  } catch (e) {\n    console.error(`Engine failed to handle request`, e)\n    res.status(500).send(getErrorBody(500))\n  }\n}\n\nexport default engineHandler\n"],"mappings":"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"}