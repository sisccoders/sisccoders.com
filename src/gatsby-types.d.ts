/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type Admin = Node & Profile & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly handle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly profile_image: File;
  readonly role: Scalars['String'];
  readonly weight: Scalars['Int'];
};

type AdminConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AdminEdge>;
  readonly group: ReadonlyArray<AdminGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Admin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AdminConnection_distinctArgs = {
  field: AdminFieldSelector;
};


type AdminConnection_groupArgs = {
  field: AdminFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AdminConnection_maxArgs = {
  field: AdminFieldSelector;
};


type AdminConnection_minArgs = {
  field: AdminFieldSelector;
};


type AdminConnection_sumArgs = {
  field: AdminFieldSelector;
};

type AdminEdge = {
  readonly next: Maybe<Admin>;
  readonly node: Admin;
  readonly previous: Maybe<Admin>;
};

type AdminFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
};

type AdminFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
};

type AdminFilterListInput = {
  readonly elemMatch: InputMaybe<AdminFilterInput>;
};

type AdminGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AdminEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AdminGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Admin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AdminGroupConnection_distinctArgs = {
  field: AdminFieldSelector;
};


type AdminGroupConnection_groupArgs = {
  field: AdminFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AdminGroupConnection_maxArgs = {
  field: AdminFieldSelector;
};


type AdminGroupConnection_minArgs = {
  field: AdminFieldSelector;
};


type AdminGroupConnection_sumArgs = {
  field: AdminFieldSelector;
};

type AdminSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
};

type Alum = Node & Profile & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly handle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly period: Maybe<Scalars['String']>;
  readonly profile_image: File;
  readonly role: Scalars['String'];
  readonly weight: Scalars['Int'];
  readonly work: Maybe<Scalars['String']>;
};

type AlumConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AlumEdge>;
  readonly group: ReadonlyArray<AlumGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Alum>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AlumConnection_distinctArgs = {
  field: AlumFieldSelector;
};


type AlumConnection_groupArgs = {
  field: AlumFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AlumConnection_maxArgs = {
  field: AlumFieldSelector;
};


type AlumConnection_minArgs = {
  field: AlumFieldSelector;
};


type AlumConnection_sumArgs = {
  field: AlumFieldSelector;
};

type AlumEdge = {
  readonly next: Maybe<Alum>;
  readonly node: Alum;
  readonly previous: Maybe<Alum>;
};

type AlumFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly period: InputMaybe<FieldSelectorEnum>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
  readonly work: InputMaybe<FieldSelectorEnum>;
};

type AlumFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly period: InputMaybe<StringQueryOperatorInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
  readonly work: InputMaybe<StringQueryOperatorInput>;
};

type AlumFilterListInput = {
  readonly elemMatch: InputMaybe<AlumFilterInput>;
};

type AlumGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AlumEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AlumGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Alum>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AlumGroupConnection_distinctArgs = {
  field: AlumFieldSelector;
};


type AlumGroupConnection_groupArgs = {
  field: AlumFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AlumGroupConnection_maxArgs = {
  field: AlumFieldSelector;
};


type AlumGroupConnection_minArgs = {
  field: AlumFieldSelector;
};


type AlumGroupConnection_sumArgs = {
  field: AlumFieldSelector;
};

type AlumSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly period: InputMaybe<SortOrderEnum>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
  readonly work: InputMaybe<SortOrderEnum>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type CardImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly background: Maybe<File>;
  readonly background_color: Maybe<Scalars['String']>;
  readonly background_image: Maybe<File>;
  readonly foreground: Maybe<File>;
  readonly foreground_image: Maybe<File>;
};

type CardImageFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly background: InputMaybe<FileFieldSelector>;
  readonly background_color: InputMaybe<FieldSelectorEnum>;
  readonly background_image: InputMaybe<FileFieldSelector>;
  readonly foreground: InputMaybe<FileFieldSelector>;
  readonly foreground_image: InputMaybe<FileFieldSelector>;
};

type CardImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly background: InputMaybe<FileFilterInput>;
  readonly background_color: InputMaybe<StringQueryOperatorInput>;
  readonly background_image: InputMaybe<FileFilterInput>;
  readonly foreground: InputMaybe<FileFilterInput>;
  readonly foreground_image: InputMaybe<FileFilterInput>;
};

type CardImageSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly background: InputMaybe<FileSortInput>;
  readonly background_color: InputMaybe<SortOrderEnum>;
  readonly background_image: InputMaybe<FileSortInput>;
  readonly foreground: InputMaybe<FileSortInput>;
  readonly foreground_image: InputMaybe<FileSortInput>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type Event = ICalendarEvent & Node & TemplatedPage & {
  readonly card_image: CardImage;
  readonly children: ReadonlyArray<Node>;
  readonly credit: ReadonlyArray<Scalars['String']>;
  readonly credit_profiles: ReadonlyArray<Maybe<Profile>>;
  readonly description: Scalars['String'];
  readonly discord_event: ICalendarDiscordEventData;
  readonly ical: ICalendarEventData;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly location: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly series: Scalars['String'];
  readonly slug: Scalars['String'];
  readonly sponsors: Maybe<ReadonlyArray<Scalars['String']>>;
  readonly sponsors_profiles: Maybe<ReadonlyArray<Maybe<Org>>>;
  readonly stats: Maybe<ReadonlyArray<Stat>>;
  readonly time_close: Scalars['Date'];
  readonly time_start: Scalars['Date'];
  readonly timezone: Scalars['String'];
  readonly title: Scalars['String'];
};


type Event_time_closeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Event_time_startArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type EventConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<EventEdge>;
  readonly group: ReadonlyArray<EventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Event>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type EventConnection_distinctArgs = {
  field: EventFieldSelector;
};


type EventConnection_groupArgs = {
  field: EventFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type EventConnection_maxArgs = {
  field: EventFieldSelector;
};


type EventConnection_minArgs = {
  field: EventFieldSelector;
};


type EventConnection_sumArgs = {
  field: EventFieldSelector;
};

type EventEdge = {
  readonly next: Maybe<Event>;
  readonly node: Event;
  readonly previous: Maybe<Event>;
};

type EventFieldSelector = {
  readonly card_image: InputMaybe<CardImageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly credit: InputMaybe<FieldSelectorEnum>;
  readonly credit_profiles: InputMaybe<ProfileFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataFieldSelector>;
  readonly ical: InputMaybe<ICalendarEventDataFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly series: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly sponsors: InputMaybe<FieldSelectorEnum>;
  readonly sponsors_profiles: InputMaybe<OrgFieldSelector>;
  readonly stats: InputMaybe<StatFieldSelector>;
  readonly time_close: InputMaybe<FieldSelectorEnum>;
  readonly time_start: InputMaybe<FieldSelectorEnum>;
  readonly timezone: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type EventFilterInput = {
  readonly card_image: InputMaybe<CardImageFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly credit: InputMaybe<StringQueryOperatorInput>;
  readonly credit_profiles: InputMaybe<ProfileFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataFilterInput>;
  readonly ical: InputMaybe<ICalendarEventDataFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly series: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly sponsors_profiles: InputMaybe<OrgFilterListInput>;
  readonly stats: InputMaybe<StatFilterListInput>;
  readonly time_close: InputMaybe<DateQueryOperatorInput>;
  readonly time_start: InputMaybe<DateQueryOperatorInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type EventFilterListInput = {
  readonly elemMatch: InputMaybe<EventFilterInput>;
};

type EventGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<EventEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<EventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Event>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type EventGroupConnection_distinctArgs = {
  field: EventFieldSelector;
};


type EventGroupConnection_groupArgs = {
  field: EventFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type EventGroupConnection_maxArgs = {
  field: EventFieldSelector;
};


type EventGroupConnection_minArgs = {
  field: EventFieldSelector;
};


type EventGroupConnection_sumArgs = {
  field: EventFieldSelector;
};

type EventSortInput = {
  readonly card_image: InputMaybe<CardImageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly credit: InputMaybe<SortOrderEnum>;
  readonly credit_profiles: InputMaybe<ProfileSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataSortInput>;
  readonly ical: InputMaybe<ICalendarEventDataSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly series: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly sponsors: InputMaybe<SortOrderEnum>;
  readonly sponsors_profiles: InputMaybe<OrgSortInput>;
  readonly stats: InputMaybe<StatSortInput>;
  readonly time_close: InputMaybe<SortOrderEnum>;
  readonly time_start: InputMaybe<SortOrderEnum>;
  readonly timezone: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type LocationsJson or null if there are no children of given type on this node */
  readonly childLocationsJson: Maybe<LocationsJson>;
  /** Returns the first child node of type Mdx or null if there are no children of given type on this node */
  readonly childMdx: Maybe<Mdx>;
  /** Returns the first child node of type RedirectsInternalDynamicJson or null if there are no children of given type on this node */
  readonly childRedirectsInternalDynamicJson: Maybe<RedirectsInternalDynamicJson>;
  /** Returns the first child node of type RedirectsJson or null if there are no children of given type on this node */
  readonly childRedirectsJson: Maybe<RedirectsJson>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type LocationsJson */
  readonly childrenLocationsJson: Maybe<ReadonlyArray<Maybe<LocationsJson>>>;
  /** Returns all children nodes filtered by type Mdx */
  readonly childrenMdx: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  /** Returns all children nodes filtered by type RedirectsInternalDynamicJson */
  readonly childrenRedirectsInternalDynamicJson: Maybe<ReadonlyArray<Maybe<RedirectsInternalDynamicJson>>>;
  /** Returns all children nodes filtered by type RedirectsJson */
  readonly childrenRedirectsJson: Maybe<ReadonlyArray<Maybe<RedirectsJson>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childLocationsJson: InputMaybe<LocationsJsonFieldSelector>;
  readonly childMdx: InputMaybe<MdxFieldSelector>;
  readonly childRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonFieldSelector>;
  readonly childRedirectsJson: InputMaybe<RedirectsJsonFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenLocationsJson: InputMaybe<LocationsJsonFieldSelector>;
  readonly childrenMdx: InputMaybe<MdxFieldSelector>;
  readonly childrenRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonFieldSelector>;
  readonly childrenRedirectsJson: InputMaybe<RedirectsJsonFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childLocationsJson: InputMaybe<LocationsJsonFilterInput>;
  readonly childMdx: InputMaybe<MdxFilterInput>;
  readonly childRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonFilterInput>;
  readonly childRedirectsJson: InputMaybe<RedirectsJsonFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenLocationsJson: InputMaybe<LocationsJsonFilterListInput>;
  readonly childrenMdx: InputMaybe<MdxFilterListInput>;
  readonly childrenRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonFilterListInput>;
  readonly childrenRedirectsJson: InputMaybe<RedirectsJsonFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileFilterListInput = {
  readonly elemMatch: InputMaybe<FileFilterInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childLocationsJson: InputMaybe<LocationsJsonSortInput>;
  readonly childMdx: InputMaybe<MdxSortInput>;
  readonly childRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonSortInput>;
  readonly childRedirectsJson: InputMaybe<RedirectsJsonSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenLocationsJson: InputMaybe<LocationsJsonSortInput>;
  readonly childrenMdx: InputMaybe<MdxSortInput>;
  readonly childrenRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonSortInput>;
  readonly childrenRedirectsJson: InputMaybe<RedirectsJsonSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type Helper = Node & Profile & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly handle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly profile_image: File;
  readonly role: Scalars['String'];
  readonly weight: Scalars['Int'];
};

type HelperConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HelperEdge>;
  readonly group: ReadonlyArray<HelperGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Helper>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HelperConnection_distinctArgs = {
  field: HelperFieldSelector;
};


type HelperConnection_groupArgs = {
  field: HelperFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HelperConnection_maxArgs = {
  field: HelperFieldSelector;
};


type HelperConnection_minArgs = {
  field: HelperFieldSelector;
};


type HelperConnection_sumArgs = {
  field: HelperFieldSelector;
};

type HelperEdge = {
  readonly next: Maybe<Helper>;
  readonly node: Helper;
  readonly previous: Maybe<Helper>;
};

type HelperFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
};

type HelperFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
};

type HelperFilterListInput = {
  readonly elemMatch: InputMaybe<HelperFilterInput>;
};

type HelperGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HelperEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HelperGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Helper>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HelperGroupConnection_distinctArgs = {
  field: HelperFieldSelector;
};


type HelperGroupConnection_groupArgs = {
  field: HelperFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HelperGroupConnection_maxArgs = {
  field: HelperFieldSelector;
};


type HelperGroupConnection_minArgs = {
  field: HelperFieldSelector;
};


type HelperGroupConnection_sumArgs = {
  field: HelperFieldSelector;
};

type HelperSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
};

type ICalendarDiscordEventData = {
  readonly description: Maybe<Scalars['String']>;
  readonly image_url: Maybe<Scalars['String']>;
  readonly location: Scalars['String'];
  readonly name: Scalars['String'];
  readonly update_disabled: Scalars['Boolean'];
};

type ICalendarDiscordEventDataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image_url: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly update_disabled: InputMaybe<FieldSelectorEnum>;
};

type ICalendarDiscordEventDataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image_url: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly update_disabled: InputMaybe<BooleanQueryOperatorInput>;
};

type ICalendarDiscordEventDataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image_url: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly update_disabled: InputMaybe<SortOrderEnum>;
};

type ICalendarEvent = {
  readonly children: ReadonlyArray<Node>;
  readonly discord_event: ICalendarDiscordEventData;
  readonly ical: ICalendarEventData;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly time_close: Scalars['Date'];
  readonly time_start: Scalars['Date'];
};


type ICalendarEvent_time_closeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ICalendarEvent_time_startArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ICalendarEventConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ICalendarEventEdge>;
  readonly group: ReadonlyArray<ICalendarEventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ICalendarEvent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ICalendarEventConnection_distinctArgs = {
  field: ICalendarEventFieldSelector;
};


type ICalendarEventConnection_groupArgs = {
  field: ICalendarEventFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ICalendarEventConnection_maxArgs = {
  field: ICalendarEventFieldSelector;
};


type ICalendarEventConnection_minArgs = {
  field: ICalendarEventFieldSelector;
};


type ICalendarEventConnection_sumArgs = {
  field: ICalendarEventFieldSelector;
};

type ICalendarEventData = {
  readonly description: Maybe<Scalars['String']>;
  readonly location: Maybe<ICalendarLocationData>;
  readonly sequence: Scalars['Int'];
  readonly title: Scalars['String'];
  readonly uid: Scalars['String'];
  readonly url: Maybe<Scalars['String']>;
};

type ICalendarEventDataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<ICalendarLocationDataFieldSelector>;
  readonly sequence: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ICalendarEventDataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<ICalendarLocationDataFilterInput>;
  readonly sequence: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ICalendarEventDataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<ICalendarLocationDataSortInput>;
  readonly sequence: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type ICalendarEventEdge = {
  readonly next: Maybe<ICalendarEvent>;
  readonly node: ICalendarEvent;
  readonly previous: Maybe<ICalendarEvent>;
};

type ICalendarEventFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataFieldSelector>;
  readonly ical: InputMaybe<ICalendarEventDataFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly time_close: InputMaybe<FieldSelectorEnum>;
  readonly time_start: InputMaybe<FieldSelectorEnum>;
};

type ICalendarEventFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataFilterInput>;
  readonly ical: InputMaybe<ICalendarEventDataFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly time_close: InputMaybe<DateQueryOperatorInput>;
  readonly time_start: InputMaybe<DateQueryOperatorInput>;
};

type ICalendarEventGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ICalendarEventEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ICalendarEventGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ICalendarEvent>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ICalendarEventGroupConnection_distinctArgs = {
  field: ICalendarEventFieldSelector;
};


type ICalendarEventGroupConnection_groupArgs = {
  field: ICalendarEventFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ICalendarEventGroupConnection_maxArgs = {
  field: ICalendarEventFieldSelector;
};


type ICalendarEventGroupConnection_minArgs = {
  field: ICalendarEventFieldSelector;
};


type ICalendarEventGroupConnection_sumArgs = {
  field: ICalendarEventFieldSelector;
};

type ICalendarEventSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataSortInput>;
  readonly ical: InputMaybe<ICalendarEventDataSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly time_close: InputMaybe<SortOrderEnum>;
  readonly time_start: InputMaybe<SortOrderEnum>;
};

type ICalendarGeoData = {
  readonly lat: Scalars['Float'];
  readonly lon: Scalars['Float'];
};

type ICalendarGeoDataFieldSelector = {
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lon: InputMaybe<FieldSelectorEnum>;
};

type ICalendarGeoDataFilterInput = {
  readonly lat: InputMaybe<FloatQueryOperatorInput>;
  readonly lon: InputMaybe<FloatQueryOperatorInput>;
};

type ICalendarGeoDataSortInput = {
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lon: InputMaybe<SortOrderEnum>;
};

type ICalendarLocationData = {
  readonly address: Maybe<Scalars['String']>;
  readonly geo: Maybe<ICalendarGeoData>;
  readonly radius: Maybe<Scalars['Float']>;
  readonly title: Maybe<Scalars['String']>;
};

type ICalendarLocationDataFieldSelector = {
  readonly address: InputMaybe<FieldSelectorEnum>;
  readonly geo: InputMaybe<ICalendarGeoDataFieldSelector>;
  readonly radius: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type ICalendarLocationDataFilterInput = {
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly geo: InputMaybe<ICalendarGeoDataFilterInput>;
  readonly radius: InputMaybe<FloatQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ICalendarLocationDataSortInput = {
  readonly address: InputMaybe<SortOrderEnum>;
  readonly geo: InputMaybe<ICalendarGeoDataSortInput>;
  readonly radius: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type ImageAlt = {
  readonly alt: Scalars['String'];
  readonly path: File;
};

type ImageAltFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly path: InputMaybe<FileFieldSelector>;
};

type ImageAltFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly path: InputMaybe<FileFilterInput>;
};

type ImageAltSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly path: InputMaybe<FileSortInput>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type Link = {
  readonly name: Scalars['String'];
  readonly url: Scalars['String'];
};

type LinkFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type LinkFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type LinkFilterListInput = {
  readonly elemMatch: InputMaybe<LinkFilterInput>;
};

type LinkSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type LocationsJson = Node & {
  readonly address: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly geo: Maybe<LocationsJsonGeo>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matches: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type LocationsJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LocationsJsonEdge>;
  readonly group: ReadonlyArray<LocationsJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LocationsJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LocationsJsonConnection_distinctArgs = {
  field: LocationsJsonFieldSelector;
};


type LocationsJsonConnection_groupArgs = {
  field: LocationsJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LocationsJsonConnection_maxArgs = {
  field: LocationsJsonFieldSelector;
};


type LocationsJsonConnection_minArgs = {
  field: LocationsJsonFieldSelector;
};


type LocationsJsonConnection_sumArgs = {
  field: LocationsJsonFieldSelector;
};

type LocationsJsonEdge = {
  readonly next: Maybe<LocationsJson>;
  readonly node: LocationsJson;
  readonly previous: Maybe<LocationsJson>;
};

type LocationsJsonFieldSelector = {
  readonly address: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly geo: InputMaybe<LocationsJsonGeoFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matches: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type LocationsJsonFilterInput = {
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly geo: InputMaybe<LocationsJsonGeoFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matches: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type LocationsJsonFilterListInput = {
  readonly elemMatch: InputMaybe<LocationsJsonFilterInput>;
};

type LocationsJsonGeo = {
  readonly lat: Maybe<Scalars['String']>;
  readonly lon: Maybe<Scalars['String']>;
};

type LocationsJsonGeoFieldSelector = {
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lon: InputMaybe<FieldSelectorEnum>;
};

type LocationsJsonGeoFilterInput = {
  readonly lat: InputMaybe<StringQueryOperatorInput>;
  readonly lon: InputMaybe<StringQueryOperatorInput>;
};

type LocationsJsonGeoSortInput = {
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lon: InputMaybe<SortOrderEnum>;
};

type LocationsJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LocationsJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LocationsJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LocationsJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LocationsJsonGroupConnection_distinctArgs = {
  field: LocationsJsonFieldSelector;
};


type LocationsJsonGroupConnection_groupArgs = {
  field: LocationsJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LocationsJsonGroupConnection_maxArgs = {
  field: LocationsJsonFieldSelector;
};


type LocationsJsonGroupConnection_minArgs = {
  field: LocationsJsonFieldSelector;
};


type LocationsJsonGroupConnection_sumArgs = {
  field: LocationsJsonFieldSelector;
};

type LocationsJsonSortInput = {
  readonly address: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly geo: InputMaybe<LocationsJsonGeoSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matches: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type Mdx = Node & {
  readonly body: Maybe<Scalars['String']>;
  /** Returns the first child node of type Admin or null if there are no children of given type on this node */
  readonly childAdmin: Maybe<Admin>;
  /** Returns the first child node of type Alum or null if there are no children of given type on this node */
  readonly childAlum: Maybe<Alum>;
  /** Returns the first child node of type Event or null if there are no children of given type on this node */
  readonly childEvent: Maybe<Event>;
  /** Returns the first child node of type Helper or null if there are no children of given type on this node */
  readonly childHelper: Maybe<Helper>;
  /** Returns the first child node of type Meeting or null if there are no children of given type on this node */
  readonly childMeeting: Maybe<Meeting>;
  /** Returns the first child node of type Org or null if there are no children of given type on this node */
  readonly childOrg: Maybe<Org>;
  /** Returns the first child node of type PageMarkdown or null if there are no children of given type on this node */
  readonly childPageMarkdown: Maybe<PageMarkdown>;
  /** Returns the first child node of type Publication or null if there are no children of given type on this node */
  readonly childPublication: Maybe<Publication>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type Admin */
  readonly childrenAdmin: Maybe<ReadonlyArray<Maybe<Admin>>>;
  /** Returns all children nodes filtered by type Alum */
  readonly childrenAlum: Maybe<ReadonlyArray<Maybe<Alum>>>;
  /** Returns all children nodes filtered by type Event */
  readonly childrenEvent: Maybe<ReadonlyArray<Maybe<Event>>>;
  /** Returns all children nodes filtered by type Helper */
  readonly childrenHelper: Maybe<ReadonlyArray<Maybe<Helper>>>;
  /** Returns all children nodes filtered by type Meeting */
  readonly childrenMeeting: Maybe<ReadonlyArray<Maybe<Meeting>>>;
  /** Returns all children nodes filtered by type Org */
  readonly childrenOrg: Maybe<ReadonlyArray<Maybe<Org>>>;
  /** Returns all children nodes filtered by type PageMarkdown */
  readonly childrenPageMarkdown: Maybe<ReadonlyArray<Maybe<PageMarkdown>>>;
  /** Returns all children nodes filtered by type Publication */
  readonly childrenPublication: Maybe<ReadonlyArray<Maybe<Publication>>>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly childAdmin: InputMaybe<AdminFieldSelector>;
  readonly childAlum: InputMaybe<AlumFieldSelector>;
  readonly childEvent: InputMaybe<EventFieldSelector>;
  readonly childHelper: InputMaybe<HelperFieldSelector>;
  readonly childMeeting: InputMaybe<MeetingFieldSelector>;
  readonly childOrg: InputMaybe<OrgFieldSelector>;
  readonly childPageMarkdown: InputMaybe<PageMarkdownFieldSelector>;
  readonly childPublication: InputMaybe<PublicationFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenAdmin: InputMaybe<AdminFieldSelector>;
  readonly childrenAlum: InputMaybe<AlumFieldSelector>;
  readonly childrenEvent: InputMaybe<EventFieldSelector>;
  readonly childrenHelper: InputMaybe<HelperFieldSelector>;
  readonly childrenMeeting: InputMaybe<MeetingFieldSelector>;
  readonly childrenOrg: InputMaybe<OrgFieldSelector>;
  readonly childrenPageMarkdown: InputMaybe<PageMarkdownFieldSelector>;
  readonly childrenPublication: InputMaybe<PublicationFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
};

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly childAdmin: InputMaybe<AdminFilterInput>;
  readonly childAlum: InputMaybe<AlumFilterInput>;
  readonly childEvent: InputMaybe<EventFilterInput>;
  readonly childHelper: InputMaybe<HelperFilterInput>;
  readonly childMeeting: InputMaybe<MeetingFilterInput>;
  readonly childOrg: InputMaybe<OrgFilterInput>;
  readonly childPageMarkdown: InputMaybe<PageMarkdownFilterInput>;
  readonly childPublication: InputMaybe<PublicationFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenAdmin: InputMaybe<AdminFilterListInput>;
  readonly childrenAlum: InputMaybe<AlumFilterListInput>;
  readonly childrenEvent: InputMaybe<EventFilterListInput>;
  readonly childrenHelper: InputMaybe<HelperFilterListInput>;
  readonly childrenMeeting: InputMaybe<MeetingFilterListInput>;
  readonly childrenOrg: InputMaybe<OrgFilterListInput>;
  readonly childrenPageMarkdown: InputMaybe<PageMarkdownFilterListInput>;
  readonly childrenPublication: InputMaybe<PublicationFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};

type MdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFilterInput>;
};

type MdxFrontmatter = {
  readonly affiliation: Maybe<Scalars['String']>;
  readonly bio: Maybe<Scalars['String']>;
  readonly card_image: Maybe<MdxFrontmatterCard_image>;
  readonly credit: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly featured: Maybe<Scalars['Boolean']>;
  readonly handle: Maybe<Scalars['String']>;
  readonly image: Maybe<MdxFrontmatterImage>;
  readonly links: Maybe<ReadonlyArray<Maybe<MdxFrontmatterLinks>>>;
  readonly live_video_url: Maybe<Scalars['String']>;
  readonly location: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly other_links: Maybe<ReadonlyArray<Maybe<MdxFrontmatterOther_links>>>;
  readonly period: Maybe<Scalars['String']>;
  readonly primary_link: Maybe<MdxFrontmatterPrimary_link>;
  readonly profile_image: Maybe<File>;
  readonly publication_type: Maybe<Scalars['String']>;
  readonly publisher: Maybe<Scalars['String']>;
  readonly recording: Maybe<Scalars['String']>;
  readonly role: Maybe<Scalars['String']>;
  readonly series: Maybe<Scalars['Int']>;
  readonly slides: Maybe<File>;
  readonly sponsors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly stats: Maybe<ReadonlyArray<Maybe<MdxFrontmatterStats>>>;
  readonly time_close: Maybe<Scalars['String']>;
  readonly time_start: Maybe<Scalars['String']>;
  readonly timezone: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly week_number: Maybe<Scalars['Int']>;
  readonly weight: Maybe<Scalars['Int']>;
  readonly work: Maybe<Scalars['String']>;
};


type MdxFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterCard_image = {
  readonly alt: Maybe<Scalars['String']>;
  readonly background: Maybe<Scalars['String']>;
  readonly background_color: Maybe<Scalars['String']>;
  readonly foreground: Maybe<Scalars['String']>;
};

type MdxFrontmatterCard_imageFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly background: InputMaybe<FieldSelectorEnum>;
  readonly background_color: InputMaybe<FieldSelectorEnum>;
  readonly foreground: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterCard_imageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly background: InputMaybe<StringQueryOperatorInput>;
  readonly background_color: InputMaybe<StringQueryOperatorInput>;
  readonly foreground: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterCard_imageSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly background: InputMaybe<SortOrderEnum>;
  readonly background_color: InputMaybe<SortOrderEnum>;
  readonly foreground: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterFieldSelector = {
  readonly affiliation: InputMaybe<FieldSelectorEnum>;
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly card_image: InputMaybe<MdxFrontmatterCard_imageFieldSelector>;
  readonly credit: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<MdxFrontmatterImageFieldSelector>;
  readonly links: InputMaybe<MdxFrontmatterLinksFieldSelector>;
  readonly live_video_url: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly other_links: InputMaybe<MdxFrontmatterOther_linksFieldSelector>;
  readonly period: InputMaybe<FieldSelectorEnum>;
  readonly primary_link: InputMaybe<MdxFrontmatterPrimary_linkFieldSelector>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly publication_type: InputMaybe<FieldSelectorEnum>;
  readonly publisher: InputMaybe<FieldSelectorEnum>;
  readonly recording: InputMaybe<FieldSelectorEnum>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly series: InputMaybe<FieldSelectorEnum>;
  readonly slides: InputMaybe<FileFieldSelector>;
  readonly sponsors: InputMaybe<FieldSelectorEnum>;
  readonly stats: InputMaybe<MdxFrontmatterStatsFieldSelector>;
  readonly time_close: InputMaybe<FieldSelectorEnum>;
  readonly time_start: InputMaybe<FieldSelectorEnum>;
  readonly timezone: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly week_number: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
  readonly work: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterFilterInput = {
  readonly affiliation: InputMaybe<StringQueryOperatorInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly card_image: InputMaybe<MdxFrontmatterCard_imageFilterInput>;
  readonly credit: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<MdxFrontmatterImageFilterInput>;
  readonly links: InputMaybe<MdxFrontmatterLinksFilterListInput>;
  readonly live_video_url: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly other_links: InputMaybe<MdxFrontmatterOther_linksFilterListInput>;
  readonly period: InputMaybe<StringQueryOperatorInput>;
  readonly primary_link: InputMaybe<MdxFrontmatterPrimary_linkFilterInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly publication_type: InputMaybe<StringQueryOperatorInput>;
  readonly publisher: InputMaybe<StringQueryOperatorInput>;
  readonly recording: InputMaybe<StringQueryOperatorInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly series: InputMaybe<IntQueryOperatorInput>;
  readonly slides: InputMaybe<FileFilterInput>;
  readonly sponsors: InputMaybe<StringQueryOperatorInput>;
  readonly stats: InputMaybe<MdxFrontmatterStatsFilterListInput>;
  readonly time_close: InputMaybe<StringQueryOperatorInput>;
  readonly time_start: InputMaybe<StringQueryOperatorInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly week_number: InputMaybe<IntQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
  readonly work: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly path: Maybe<File>;
};

type MdxFrontmatterImageFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly path: InputMaybe<FileFieldSelector>;
};

type MdxFrontmatterImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly path: InputMaybe<FileFilterInput>;
};

type MdxFrontmatterImageSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly path: InputMaybe<FileSortInput>;
};

type MdxFrontmatterLinks = {
  readonly name: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MdxFrontmatterLinksFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterLinksFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterLinksFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterLinksFilterInput>;
};

type MdxFrontmatterLinksSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterOther_links = {
  readonly name: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MdxFrontmatterOther_linksFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterOther_linksFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterOther_linksFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterOther_linksFilterInput>;
};

type MdxFrontmatterOther_linksSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterPrimary_link = {
  readonly name: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MdxFrontmatterPrimary_linkFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterPrimary_linkFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterPrimary_linkSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterSortInput = {
  readonly affiliation: InputMaybe<SortOrderEnum>;
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly card_image: InputMaybe<MdxFrontmatterCard_imageSortInput>;
  readonly credit: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<MdxFrontmatterImageSortInput>;
  readonly links: InputMaybe<MdxFrontmatterLinksSortInput>;
  readonly live_video_url: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly other_links: InputMaybe<MdxFrontmatterOther_linksSortInput>;
  readonly period: InputMaybe<SortOrderEnum>;
  readonly primary_link: InputMaybe<MdxFrontmatterPrimary_linkSortInput>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly publication_type: InputMaybe<SortOrderEnum>;
  readonly publisher: InputMaybe<SortOrderEnum>;
  readonly recording: InputMaybe<SortOrderEnum>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly series: InputMaybe<SortOrderEnum>;
  readonly slides: InputMaybe<FileSortInput>;
  readonly sponsors: InputMaybe<SortOrderEnum>;
  readonly stats: InputMaybe<MdxFrontmatterStatsSortInput>;
  readonly time_close: InputMaybe<SortOrderEnum>;
  readonly time_start: InputMaybe<SortOrderEnum>;
  readonly timezone: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly week_number: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
  readonly work: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterStats = {
  readonly name: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MdxFrontmatterStatsFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterStatsFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterStatsFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterStatsFilterInput>;
};

type MdxFrontmatterStatsSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly childAdmin: InputMaybe<AdminSortInput>;
  readonly childAlum: InputMaybe<AlumSortInput>;
  readonly childEvent: InputMaybe<EventSortInput>;
  readonly childHelper: InputMaybe<HelperSortInput>;
  readonly childMeeting: InputMaybe<MeetingSortInput>;
  readonly childOrg: InputMaybe<OrgSortInput>;
  readonly childPageMarkdown: InputMaybe<PageMarkdownSortInput>;
  readonly childPublication: InputMaybe<PublicationSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenAdmin: InputMaybe<AdminSortInput>;
  readonly childrenAlum: InputMaybe<AlumSortInput>;
  readonly childrenEvent: InputMaybe<EventSortInput>;
  readonly childrenHelper: InputMaybe<HelperSortInput>;
  readonly childrenMeeting: InputMaybe<MeetingSortInput>;
  readonly childrenOrg: InputMaybe<OrgSortInput>;
  readonly childrenPageMarkdown: InputMaybe<PageMarkdownSortInput>;
  readonly childrenPublication: InputMaybe<PublicationSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MdxFrontmatterSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
};

type Meeting = ICalendarEvent & Node & TemplatedPage & {
  readonly assets: Maybe<ReadonlyArray<File>>;
  readonly children: ReadonlyArray<Node>;
  readonly credit: ReadonlyArray<Scalars['String']>;
  readonly credit_profiles: ReadonlyArray<Maybe<Profile>>;
  readonly description: Maybe<Scalars['String']>;
  readonly discord_event: ICalendarDiscordEventData;
  readonly featured: Maybe<Scalars['Boolean']>;
  readonly ical: ICalendarEventData;
  readonly id: Scalars['ID'];
  readonly image: Maybe<ImageAlt>;
  readonly internal: Internal;
  readonly live_video_url: Maybe<Scalars['String']>;
  readonly location: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly recording: Maybe<Scalars['String']>;
  readonly semester: Scalars['String'];
  readonly slides: Maybe<File>;
  readonly slug: Scalars['String'];
  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>;
  readonly time_close: Scalars['Date'];
  readonly time_start: Scalars['Date'];
  readonly timezone: Scalars['String'];
  readonly title: Scalars['String'];
  readonly week_number: Scalars['Int'];
};


type Meeting_time_closeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Meeting_time_startArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MeetingConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MeetingEdge>;
  readonly group: ReadonlyArray<MeetingGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Meeting>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MeetingConnection_distinctArgs = {
  field: MeetingFieldSelector;
};


type MeetingConnection_groupArgs = {
  field: MeetingFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MeetingConnection_maxArgs = {
  field: MeetingFieldSelector;
};


type MeetingConnection_minArgs = {
  field: MeetingFieldSelector;
};


type MeetingConnection_sumArgs = {
  field: MeetingFieldSelector;
};

type MeetingEdge = {
  readonly next: Maybe<Meeting>;
  readonly node: Meeting;
  readonly previous: Maybe<Meeting>;
};

type MeetingFieldSelector = {
  readonly assets: InputMaybe<FileFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly credit: InputMaybe<FieldSelectorEnum>;
  readonly credit_profiles: InputMaybe<ProfileFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataFieldSelector>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly ical: InputMaybe<ICalendarEventDataFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<ImageAltFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly live_video_url: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly recording: InputMaybe<FieldSelectorEnum>;
  readonly semester: InputMaybe<FieldSelectorEnum>;
  readonly slides: InputMaybe<FileFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly time_close: InputMaybe<FieldSelectorEnum>;
  readonly time_start: InputMaybe<FieldSelectorEnum>;
  readonly timezone: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly week_number: InputMaybe<FieldSelectorEnum>;
};

type MeetingFilterInput = {
  readonly assets: InputMaybe<FileFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly credit: InputMaybe<StringQueryOperatorInput>;
  readonly credit_profiles: InputMaybe<ProfileFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataFilterInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly ical: InputMaybe<ICalendarEventDataFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<ImageAltFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly live_video_url: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly recording: InputMaybe<StringQueryOperatorInput>;
  readonly semester: InputMaybe<StringQueryOperatorInput>;
  readonly slides: InputMaybe<FileFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly time_close: InputMaybe<DateQueryOperatorInput>;
  readonly time_start: InputMaybe<DateQueryOperatorInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly week_number: InputMaybe<IntQueryOperatorInput>;
};

type MeetingFilterListInput = {
  readonly elemMatch: InputMaybe<MeetingFilterInput>;
};

type MeetingGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MeetingEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MeetingGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Meeting>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MeetingGroupConnection_distinctArgs = {
  field: MeetingFieldSelector;
};


type MeetingGroupConnection_groupArgs = {
  field: MeetingFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MeetingGroupConnection_maxArgs = {
  field: MeetingFieldSelector;
};


type MeetingGroupConnection_minArgs = {
  field: MeetingFieldSelector;
};


type MeetingGroupConnection_sumArgs = {
  field: MeetingFieldSelector;
};

type MeetingSortInput = {
  readonly assets: InputMaybe<FileSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly credit: InputMaybe<SortOrderEnum>;
  readonly credit_profiles: InputMaybe<ProfileSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly discord_event: InputMaybe<ICalendarDiscordEventDataSortInput>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly ical: InputMaybe<ICalendarEventDataSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<ImageAltSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly live_video_url: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly recording: InputMaybe<SortOrderEnum>;
  readonly semester: InputMaybe<SortOrderEnum>;
  readonly slides: InputMaybe<FileSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly time_close: InputMaybe<SortOrderEnum>;
  readonly time_start: InputMaybe<SortOrderEnum>;
  readonly timezone: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly week_number: InputMaybe<SortOrderEnum>;
};

type Member = Node & Profile & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly handle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly profile_image: File;
  readonly role: Scalars['String'];
  readonly weight: Scalars['Int'];
};

type MemberConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MemberEdge>;
  readonly group: ReadonlyArray<MemberGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Member>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MemberConnection_distinctArgs = {
  field: MemberFieldSelector;
};


type MemberConnection_groupArgs = {
  field: MemberFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MemberConnection_maxArgs = {
  field: MemberFieldSelector;
};


type MemberConnection_minArgs = {
  field: MemberFieldSelector;
};


type MemberConnection_sumArgs = {
  field: MemberFieldSelector;
};

type MemberEdge = {
  readonly next: Maybe<Member>;
  readonly node: Member;
  readonly previous: Maybe<Member>;
};

type MemberFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
};

type MemberFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
};

type MemberGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MemberEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MemberGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Member>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MemberGroupConnection_distinctArgs = {
  field: MemberFieldSelector;
};


type MemberGroupConnection_groupArgs = {
  field: MemberFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MemberGroupConnection_maxArgs = {
  field: MemberFieldSelector;
};


type MemberGroupConnection_minArgs = {
  field: MemberFieldSelector;
};


type MemberGroupConnection_sumArgs = {
  field: MemberFieldSelector;
};

type MemberSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type Org = Node & Profile & {
  readonly affiliation: Maybe<Scalars['String']>;
  readonly bio: Maybe<Scalars['String']>;
  readonly card_image: Maybe<CardImage>;
  readonly children: ReadonlyArray<Node>;
  readonly featured: Scalars['Boolean'];
  readonly handle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly profile_image: File;
  readonly role: Scalars['String'];
  readonly weight: Scalars['Int'];
};

type OrgConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<OrgEdge>;
  readonly group: ReadonlyArray<OrgGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Org>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type OrgConnection_distinctArgs = {
  field: OrgFieldSelector;
};


type OrgConnection_groupArgs = {
  field: OrgFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type OrgConnection_maxArgs = {
  field: OrgFieldSelector;
};


type OrgConnection_minArgs = {
  field: OrgFieldSelector;
};


type OrgConnection_sumArgs = {
  field: OrgFieldSelector;
};

type OrgEdge = {
  readonly next: Maybe<Org>;
  readonly node: Org;
  readonly previous: Maybe<Org>;
};

type OrgFieldSelector = {
  readonly affiliation: InputMaybe<FieldSelectorEnum>;
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly card_image: InputMaybe<CardImageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
};

type OrgFilterInput = {
  readonly affiliation: InputMaybe<StringQueryOperatorInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly card_image: InputMaybe<CardImageFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
};

type OrgFilterListInput = {
  readonly elemMatch: InputMaybe<OrgFilterInput>;
};

type OrgGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<OrgEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<OrgGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Org>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type OrgGroupConnection_distinctArgs = {
  field: OrgFieldSelector;
};


type OrgGroupConnection_groupArgs = {
  field: OrgFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type OrgGroupConnection_maxArgs = {
  field: OrgFieldSelector;
};


type OrgGroupConnection_minArgs = {
  field: OrgFieldSelector;
};


type OrgGroupConnection_sumArgs = {
  field: OrgFieldSelector;
};

type OrgSortInput = {
  readonly affiliation: InputMaybe<SortOrderEnum>;
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly card_image: InputMaybe<CardImageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type PageMarkdown = Node & TemplatedPage & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly options: Maybe<PageMarkdownOptions>;
  readonly parent: Maybe<Node>;
  readonly slug: Scalars['String'];
  readonly title: Scalars['String'];
};

type PageMarkdownConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageMarkdownEdge>;
  readonly group: ReadonlyArray<PageMarkdownGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PageMarkdown>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageMarkdownConnection_distinctArgs = {
  field: PageMarkdownFieldSelector;
};


type PageMarkdownConnection_groupArgs = {
  field: PageMarkdownFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageMarkdownConnection_maxArgs = {
  field: PageMarkdownFieldSelector;
};


type PageMarkdownConnection_minArgs = {
  field: PageMarkdownFieldSelector;
};


type PageMarkdownConnection_sumArgs = {
  field: PageMarkdownFieldSelector;
};

type PageMarkdownEdge = {
  readonly next: Maybe<PageMarkdown>;
  readonly node: PageMarkdown;
  readonly previous: Maybe<PageMarkdown>;
};

type PageMarkdownFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly options: InputMaybe<PageMarkdownOptionsFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PageMarkdownFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly options: InputMaybe<PageMarkdownOptionsFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PageMarkdownFilterListInput = {
  readonly elemMatch: InputMaybe<PageMarkdownFilterInput>;
};

type PageMarkdownGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageMarkdownEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PageMarkdownGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PageMarkdown>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageMarkdownGroupConnection_distinctArgs = {
  field: PageMarkdownFieldSelector;
};


type PageMarkdownGroupConnection_groupArgs = {
  field: PageMarkdownFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageMarkdownGroupConnection_maxArgs = {
  field: PageMarkdownFieldSelector;
};


type PageMarkdownGroupConnection_minArgs = {
  field: PageMarkdownFieldSelector;
};


type PageMarkdownGroupConnection_sumArgs = {
  field: PageMarkdownFieldSelector;
};

type PageMarkdownOptions = {
  readonly full_width: Maybe<Scalars['Boolean']>;
  readonly no_background: Maybe<Scalars['Boolean']>;
};

type PageMarkdownOptionsFieldSelector = {
  readonly full_width: InputMaybe<FieldSelectorEnum>;
  readonly no_background: InputMaybe<FieldSelectorEnum>;
};

type PageMarkdownOptionsFilterInput = {
  readonly full_width: InputMaybe<BooleanQueryOperatorInput>;
  readonly no_background: InputMaybe<BooleanQueryOperatorInput>;
};

type PageMarkdownOptionsSortInput = {
  readonly full_width: InputMaybe<SortOrderEnum>;
  readonly no_background: InputMaybe<SortOrderEnum>;
};

type PageMarkdownSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly options: InputMaybe<PageMarkdownOptionsSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Profile = {
  readonly bio: Maybe<Scalars['String']>;
  readonly handle: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly name: Scalars['String'];
  readonly profile_image: File;
  readonly role: Scalars['String'];
  readonly weight: Scalars['Int'];
};

type ProfileFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly handle: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly profile_image: InputMaybe<FileFieldSelector>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly weight: InputMaybe<FieldSelectorEnum>;
};

type ProfileFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly handle: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly profile_image: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly weight: InputMaybe<IntQueryOperatorInput>;
};

type ProfileFilterListInput = {
  readonly elemMatch: InputMaybe<ProfileFilterInput>;
};

type ProfileSortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly handle: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly profile_image: InputMaybe<FileSortInput>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly weight: InputMaybe<SortOrderEnum>;
};

type Publication = Node & TemplatedPage & {
  readonly card_image: CardImage;
  readonly children: ReadonlyArray<Node>;
  readonly credit: ReadonlyArray<Scalars['String']>;
  readonly credit_profiles: ReadonlyArray<Maybe<Profile>>;
  readonly date: Scalars['Date'];
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Link>>;
  readonly parent: Maybe<Node>;
  readonly primary_link: Maybe<Link>;
  readonly publication_type: Scalars['String'];
  readonly publisher: Maybe<Scalars['String']>;
  readonly slug: Scalars['String'];
  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>;
  readonly title: Scalars['String'];
};


type Publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type PublicationConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PublicationEdge>;
  readonly group: ReadonlyArray<PublicationGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Publication>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PublicationConnection_distinctArgs = {
  field: PublicationFieldSelector;
};


type PublicationConnection_groupArgs = {
  field: PublicationFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PublicationConnection_maxArgs = {
  field: PublicationFieldSelector;
};


type PublicationConnection_minArgs = {
  field: PublicationFieldSelector;
};


type PublicationConnection_sumArgs = {
  field: PublicationFieldSelector;
};

type PublicationEdge = {
  readonly next: Maybe<Publication>;
  readonly node: Publication;
  readonly previous: Maybe<Publication>;
};

type PublicationFieldSelector = {
  readonly card_image: InputMaybe<CardImageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly credit: InputMaybe<FieldSelectorEnum>;
  readonly credit_profiles: InputMaybe<ProfileFieldSelector>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<LinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly primary_link: InputMaybe<LinkFieldSelector>;
  readonly publication_type: InputMaybe<FieldSelectorEnum>;
  readonly publisher: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PublicationFilterInput = {
  readonly card_image: InputMaybe<CardImageFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly credit: InputMaybe<StringQueryOperatorInput>;
  readonly credit_profiles: InputMaybe<ProfileFilterListInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<LinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly primary_link: InputMaybe<LinkFilterInput>;
  readonly publication_type: InputMaybe<StringQueryOperatorInput>;
  readonly publisher: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PublicationFilterListInput = {
  readonly elemMatch: InputMaybe<PublicationFilterInput>;
};

type PublicationGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PublicationEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PublicationGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Publication>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PublicationGroupConnection_distinctArgs = {
  field: PublicationFieldSelector;
};


type PublicationGroupConnection_groupArgs = {
  field: PublicationFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PublicationGroupConnection_maxArgs = {
  field: PublicationFieldSelector;
};


type PublicationGroupConnection_minArgs = {
  field: PublicationFieldSelector;
};


type PublicationGroupConnection_sumArgs = {
  field: PublicationFieldSelector;
};

type PublicationSortInput = {
  readonly card_image: InputMaybe<CardImageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly credit: InputMaybe<SortOrderEnum>;
  readonly credit_profiles: InputMaybe<ProfileSortInput>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<LinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly primary_link: InputMaybe<LinkSortInput>;
  readonly publication_type: InputMaybe<SortOrderEnum>;
  readonly publisher: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type Query = {
  readonly admin: Maybe<Admin>;
  readonly allAdmin: AdminConnection;
  readonly allAlum: AlumConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allEvent: EventConnection;
  readonly allFile: FileConnection;
  readonly allHelper: HelperConnection;
  readonly allICalendarEvent: ICalendarEventConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allLocationsJson: LocationsJsonConnection;
  readonly allMdx: MdxConnection;
  readonly allMeeting: MeetingConnection;
  readonly allMember: MemberConnection;
  readonly allOrg: OrgConnection;
  readonly allPageMarkdown: PageMarkdownConnection;
  readonly allPublication: PublicationConnection;
  readonly allRedirectsInternalDynamicJson: RedirectsInternalDynamicJsonConnection;
  readonly allRedirectsJson: RedirectsJsonConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStaticImage: StaticImageConnection;
  readonly allTemplatedPage: TemplatedPageConnection;
  readonly alum: Maybe<Alum>;
  readonly directory: Maybe<Directory>;
  readonly event: Maybe<Event>;
  readonly file: Maybe<File>;
  readonly helper: Maybe<Helper>;
  readonly iCalendarEvent: Maybe<ICalendarEvent>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly locationsJson: Maybe<LocationsJson>;
  readonly mdx: Maybe<Mdx>;
  readonly meeting: Maybe<Meeting>;
  readonly member: Maybe<Member>;
  readonly org: Maybe<Org>;
  readonly pageMarkdown: Maybe<PageMarkdown>;
  readonly publication: Maybe<Publication>;
  readonly redirectsInternalDynamicJson: Maybe<RedirectsInternalDynamicJson>;
  readonly redirectsJson: Maybe<RedirectsJson>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly staticImage: Maybe<StaticImage>;
  readonly templatedPage: Maybe<TemplatedPage>;
};


type Query_adminArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  profile_image: InputMaybe<FileFilterInput>;
  role: InputMaybe<StringQueryOperatorInput>;
  weight: InputMaybe<IntQueryOperatorInput>;
};


type Query_allAdminArgs = {
  filter: InputMaybe<AdminFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AdminSortInput>>>;
};


type Query_allAlumArgs = {
  filter: InputMaybe<AlumFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AlumSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allEventArgs = {
  filter: InputMaybe<EventFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<EventSortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allHelperArgs = {
  filter: InputMaybe<HelperFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HelperSortInput>>>;
};


type Query_allICalendarEventArgs = {
  filter: InputMaybe<ICalendarEventFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ICalendarEventSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allLocationsJsonArgs = {
  filter: InputMaybe<LocationsJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LocationsJsonSortInput>>>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MdxSortInput>>>;
};


type Query_allMeetingArgs = {
  filter: InputMaybe<MeetingFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MeetingSortInput>>>;
};


type Query_allMemberArgs = {
  filter: InputMaybe<MemberFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MemberSortInput>>>;
};


type Query_allOrgArgs = {
  filter: InputMaybe<OrgFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<OrgSortInput>>>;
};


type Query_allPageMarkdownArgs = {
  filter: InputMaybe<PageMarkdownFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PageMarkdownSortInput>>>;
};


type Query_allPublicationArgs = {
  filter: InputMaybe<PublicationFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PublicationSortInput>>>;
};


type Query_allRedirectsInternalDynamicJsonArgs = {
  filter: InputMaybe<RedirectsInternalDynamicJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<RedirectsInternalDynamicJsonSortInput>>>;
};


type Query_allRedirectsJsonArgs = {
  filter: InputMaybe<RedirectsJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<RedirectsJsonSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStaticImageArgs = {
  filter: InputMaybe<StaticImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<StaticImageSortInput>>>;
};


type Query_allTemplatedPageArgs = {
  filter: InputMaybe<TemplatedPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<TemplatedPageSortInput>>>;
};


type Query_alumArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  period: InputMaybe<StringQueryOperatorInput>;
  profile_image: InputMaybe<FileFilterInput>;
  role: InputMaybe<StringQueryOperatorInput>;
  weight: InputMaybe<IntQueryOperatorInput>;
  work: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_eventArgs = {
  card_image: InputMaybe<CardImageFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  credit: InputMaybe<StringQueryOperatorInput>;
  credit_profiles: InputMaybe<ProfileFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  discord_event: InputMaybe<ICalendarDiscordEventDataFilterInput>;
  ical: InputMaybe<ICalendarEventDataFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  series: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  sponsors: InputMaybe<StringQueryOperatorInput>;
  sponsors_profiles: InputMaybe<OrgFilterListInput>;
  stats: InputMaybe<StatFilterListInput>;
  time_close: InputMaybe<DateQueryOperatorInput>;
  time_start: InputMaybe<DateQueryOperatorInput>;
  timezone: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childLocationsJson: InputMaybe<LocationsJsonFilterInput>;
  childMdx: InputMaybe<MdxFilterInput>;
  childRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonFilterInput>;
  childRedirectsJson: InputMaybe<RedirectsJsonFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenLocationsJson: InputMaybe<LocationsJsonFilterListInput>;
  childrenMdx: InputMaybe<MdxFilterListInput>;
  childrenRedirectsInternalDynamicJson: InputMaybe<RedirectsInternalDynamicJsonFilterListInput>;
  childrenRedirectsJson: InputMaybe<RedirectsJsonFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_helperArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  profile_image: InputMaybe<FileFilterInput>;
  role: InputMaybe<StringQueryOperatorInput>;
  weight: InputMaybe<IntQueryOperatorInput>;
};


type Query_iCalendarEventArgs = {
  children: InputMaybe<NodeFilterListInput>;
  discord_event: InputMaybe<ICalendarDiscordEventDataFilterInput>;
  ical: InputMaybe<ICalendarEventDataFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  time_close: InputMaybe<DateQueryOperatorInput>;
  time_start: InputMaybe<DateQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_locationsJsonArgs = {
  address: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  geo: InputMaybe<LocationsJsonGeoFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matches: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  childAdmin: InputMaybe<AdminFilterInput>;
  childAlum: InputMaybe<AlumFilterInput>;
  childEvent: InputMaybe<EventFilterInput>;
  childHelper: InputMaybe<HelperFilterInput>;
  childMeeting: InputMaybe<MeetingFilterInput>;
  childOrg: InputMaybe<OrgFilterInput>;
  childPageMarkdown: InputMaybe<PageMarkdownFilterInput>;
  childPublication: InputMaybe<PublicationFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenAdmin: InputMaybe<AdminFilterListInput>;
  childrenAlum: InputMaybe<AlumFilterListInput>;
  childrenEvent: InputMaybe<EventFilterListInput>;
  childrenHelper: InputMaybe<HelperFilterListInput>;
  childrenMeeting: InputMaybe<MeetingFilterListInput>;
  childrenOrg: InputMaybe<OrgFilterListInput>;
  childrenPageMarkdown: InputMaybe<PageMarkdownFilterListInput>;
  childrenPublication: InputMaybe<PublicationFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};


type Query_meetingArgs = {
  assets: InputMaybe<FileFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  credit: InputMaybe<StringQueryOperatorInput>;
  credit_profiles: InputMaybe<ProfileFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  discord_event: InputMaybe<ICalendarDiscordEventDataFilterInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  ical: InputMaybe<ICalendarEventDataFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<ImageAltFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  live_video_url: InputMaybe<StringQueryOperatorInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  recording: InputMaybe<StringQueryOperatorInput>;
  semester: InputMaybe<StringQueryOperatorInput>;
  slides: InputMaybe<FileFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  time_close: InputMaybe<DateQueryOperatorInput>;
  time_start: InputMaybe<DateQueryOperatorInput>;
  timezone: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  week_number: InputMaybe<IntQueryOperatorInput>;
};


type Query_memberArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  profile_image: InputMaybe<FileFilterInput>;
  role: InputMaybe<StringQueryOperatorInput>;
  weight: InputMaybe<IntQueryOperatorInput>;
};


type Query_orgArgs = {
  affiliation: InputMaybe<StringQueryOperatorInput>;
  bio: InputMaybe<StringQueryOperatorInput>;
  card_image: InputMaybe<CardImageFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  handle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  profile_image: InputMaybe<FileFilterInput>;
  role: InputMaybe<StringQueryOperatorInput>;
  weight: InputMaybe<IntQueryOperatorInput>;
};


type Query_pageMarkdownArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  options: InputMaybe<PageMarkdownOptionsFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_publicationArgs = {
  card_image: InputMaybe<CardImageFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  credit: InputMaybe<StringQueryOperatorInput>;
  credit_profiles: InputMaybe<ProfileFilterListInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<LinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  primary_link: InputMaybe<LinkFilterInput>;
  publication_type: InputMaybe<StringQueryOperatorInput>;
  publisher: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_redirectsInternalDynamicJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  dst: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  src: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
};


type Query_redirectsJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  code: InputMaybe<IntQueryOperatorInput>;
  dst: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  src: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_staticImageArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<IntQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_templatedPageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
};

type RedirectsInternalDynamicJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly dst: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly src: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type RedirectsInternalDynamicJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<RedirectsInternalDynamicJsonEdge>;
  readonly group: ReadonlyArray<RedirectsInternalDynamicJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<RedirectsInternalDynamicJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type RedirectsInternalDynamicJsonConnection_distinctArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};


type RedirectsInternalDynamicJsonConnection_groupArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type RedirectsInternalDynamicJsonConnection_maxArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};


type RedirectsInternalDynamicJsonConnection_minArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};


type RedirectsInternalDynamicJsonConnection_sumArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};

type RedirectsInternalDynamicJsonEdge = {
  readonly next: Maybe<RedirectsInternalDynamicJson>;
  readonly node: RedirectsInternalDynamicJson;
  readonly previous: Maybe<RedirectsInternalDynamicJson>;
};

type RedirectsInternalDynamicJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly dst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type RedirectsInternalDynamicJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly dst: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type RedirectsInternalDynamicJsonFilterListInput = {
  readonly elemMatch: InputMaybe<RedirectsInternalDynamicJsonFilterInput>;
};

type RedirectsInternalDynamicJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<RedirectsInternalDynamicJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<RedirectsInternalDynamicJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<RedirectsInternalDynamicJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type RedirectsInternalDynamicJsonGroupConnection_distinctArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};


type RedirectsInternalDynamicJsonGroupConnection_groupArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type RedirectsInternalDynamicJsonGroupConnection_maxArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};


type RedirectsInternalDynamicJsonGroupConnection_minArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};


type RedirectsInternalDynamicJsonGroupConnection_sumArgs = {
  field: RedirectsInternalDynamicJsonFieldSelector;
};

type RedirectsInternalDynamicJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly dst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type RedirectsJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly code: Maybe<Scalars['Int']>;
  readonly dst: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly src: Scalars['String'];
};

type RedirectsJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<RedirectsJsonEdge>;
  readonly group: ReadonlyArray<RedirectsJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<RedirectsJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type RedirectsJsonConnection_distinctArgs = {
  field: RedirectsJsonFieldSelector;
};


type RedirectsJsonConnection_groupArgs = {
  field: RedirectsJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type RedirectsJsonConnection_maxArgs = {
  field: RedirectsJsonFieldSelector;
};


type RedirectsJsonConnection_minArgs = {
  field: RedirectsJsonFieldSelector;
};


type RedirectsJsonConnection_sumArgs = {
  field: RedirectsJsonFieldSelector;
};

type RedirectsJsonEdge = {
  readonly next: Maybe<RedirectsJson>;
  readonly node: RedirectsJson;
  readonly previous: Maybe<RedirectsJson>;
};

type RedirectsJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly dst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly src: InputMaybe<FieldSelectorEnum>;
};

type RedirectsJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly code: InputMaybe<IntQueryOperatorInput>;
  readonly dst: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
};

type RedirectsJsonFilterListInput = {
  readonly elemMatch: InputMaybe<RedirectsJsonFilterInput>;
};

type RedirectsJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<RedirectsJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<RedirectsJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<RedirectsJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type RedirectsJsonGroupConnection_distinctArgs = {
  field: RedirectsJsonFieldSelector;
};


type RedirectsJsonGroupConnection_groupArgs = {
  field: RedirectsJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type RedirectsJsonGroupConnection_maxArgs = {
  field: RedirectsJsonFieldSelector;
};


type RedirectsJsonGroupConnection_minArgs = {
  field: RedirectsJsonFieldSelector;
};


type RedirectsJsonGroupConnection_sumArgs = {
  field: RedirectsJsonFieldSelector;
};

type RedirectsJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly dst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly src: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: SiteMetadata;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteMetadata = {
  readonly description: Scalars['String'];
  readonly image: Scalars['String'];
  readonly navCallToActionLinks: Maybe<ReadonlyArray<Link>>;
  readonly navLinks: Maybe<ReadonlyArray<Link>>;
  readonly siteUrl: Scalars['String'];
  readonly socialLinks: Maybe<ReadonlyArray<Link>>;
  readonly timezone: Scalars['String'];
  readonly title: Scalars['String'];
  readonly twitterUsername: Maybe<Scalars['String']>;
};

type SiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly navCallToActionLinks: InputMaybe<LinkFieldSelector>;
  readonly navLinks: InputMaybe<LinkFieldSelector>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly socialLinks: InputMaybe<LinkFieldSelector>;
  readonly timezone: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitterUsername: InputMaybe<FieldSelectorEnum>;
};

type SiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly navCallToActionLinks: InputMaybe<LinkFilterListInput>;
  readonly navLinks: InputMaybe<LinkFilterListInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly socialLinks: InputMaybe<LinkFilterListInput>;
  readonly timezone: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitterUsername: InputMaybe<StringQueryOperatorInput>;
};

type SiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly navCallToActionLinks: InputMaybe<LinkSortInput>;
  readonly navLinks: InputMaybe<LinkSortInput>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly socialLinks: InputMaybe<LinkSortInput>;
  readonly timezone: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitterUsername: InputMaybe<SortOrderEnum>;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type Stat = {
  readonly name: Scalars['String'];
  readonly value: Scalars['String'];
};

type StatFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type StatFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type StatFilterListInput = {
  readonly elemMatch: InputMaybe<StatFilterInput>;
};

type StatSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type StaticImage = Node & {
  readonly absolutePath: Maybe<Scalars['String']>;
  readonly accessTime: Maybe<Scalars['Date']>;
  readonly atime: Maybe<Scalars['Date']>;
  readonly atimeMs: Maybe<Scalars['Float']>;
  readonly base: Maybe<Scalars['String']>;
  readonly birthTime: Maybe<Scalars['Date']>;
  readonly birthtime: Maybe<Scalars['Date']>;
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Maybe<Scalars['Date']>;
  readonly ctimeMs: Maybe<Scalars['Float']>;
  readonly dev: Maybe<Scalars['Int']>;
  readonly dir: Maybe<Scalars['String']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly extension: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Maybe<Scalars['Int']>;
  readonly internal: Internal;
  readonly mode: Maybe<Scalars['Int']>;
  readonly modifiedTime: Maybe<Scalars['Date']>;
  readonly mtime: Maybe<Scalars['Date']>;
  readonly mtimeMs: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly nlink: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly prettySize: Maybe<Scalars['String']>;
  readonly rdev: Maybe<Scalars['Int']>;
  readonly relativeDirectory: Maybe<Scalars['String']>;
  readonly relativePath: Maybe<Scalars['String']>;
  readonly root: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Int']>;
  readonly sourceInstanceName: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['Int']>;
};


type StaticImage_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_birthtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type StaticImage_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type StaticImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageConnection_distinctArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageConnection_groupArgs = {
  field: StaticImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageConnection_maxArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageConnection_minArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageConnection_sumArgs = {
  field: StaticImageFieldSelector;
};

type StaticImageEdge = {
  readonly next: Maybe<StaticImage>;
  readonly node: StaticImage;
  readonly previous: Maybe<StaticImage>;
};

type StaticImageFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type StaticImageFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<IntQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type StaticImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StaticImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<StaticImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StaticImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StaticImageGroupConnection_distinctArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageGroupConnection_groupArgs = {
  field: StaticImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StaticImageGroupConnection_maxArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageGroupConnection_minArgs = {
  field: StaticImageFieldSelector;
};


type StaticImageGroupConnection_sumArgs = {
  field: StaticImageFieldSelector;
};

type StaticImageSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TemplatedPage = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly slug: Scalars['String'];
};

type TemplatedPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TemplatedPageEdge>;
  readonly group: ReadonlyArray<TemplatedPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TemplatedPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TemplatedPageConnection_distinctArgs = {
  field: TemplatedPageFieldSelector;
};


type TemplatedPageConnection_groupArgs = {
  field: TemplatedPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TemplatedPageConnection_maxArgs = {
  field: TemplatedPageFieldSelector;
};


type TemplatedPageConnection_minArgs = {
  field: TemplatedPageFieldSelector;
};


type TemplatedPageConnection_sumArgs = {
  field: TemplatedPageFieldSelector;
};

type TemplatedPageEdge = {
  readonly next: Maybe<TemplatedPage>;
  readonly node: TemplatedPage;
  readonly previous: Maybe<TemplatedPage>;
};

type TemplatedPageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
};

type TemplatedPageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type TemplatedPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TemplatedPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<TemplatedPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TemplatedPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TemplatedPageGroupConnection_distinctArgs = {
  field: TemplatedPageFieldSelector;
};


type TemplatedPageGroupConnection_groupArgs = {
  field: TemplatedPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TemplatedPageGroupConnection_maxArgs = {
  field: TemplatedPageFieldSelector;
};


type TemplatedPageGroupConnection_minArgs = {
  field: TemplatedPageFieldSelector;
};


type TemplatedPageGroupConnection_sumArgs = {
  field: TemplatedPageFieldSelector;
};

type TemplatedPageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AboutPageQueryVariables = Exact<{ [key: string]: never; }>;


type AboutPageQuery = { readonly allAdmin: { readonly admins: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly bio: string | null, readonly role: string, readonly weight: number, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null }> }, readonly allHelper: { readonly helpers: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly bio: string | null, readonly role: string, readonly weight: number, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null }> }, readonly allAlum: { readonly alumni: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly period: string | null, readonly work: string | null, readonly bio: string | null, readonly role: string, readonly weight: number, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null }> } };

type EventsPageQueryVariables = Exact<{ [key: string]: never; }>;


type EventsPageQuery = { readonly allEvent: { readonly events: ReadonlyArray<{ readonly title: string, readonly series: string, readonly time_start: string, readonly slug: string, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } }> } };

type EventTemplateQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type EventTemplateQuery = { readonly event: { readonly title: string, readonly description: string, readonly time_start: string, readonly time_close: string, readonly timezone: string, readonly credit: ReadonlyArray<string>, readonly sponsors: ReadonlyArray<string> | null, readonly location: string | null, readonly credit_profiles: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null>, readonly sponsors_profiles: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly role: string, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null> | null, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null, readonly stats: ReadonlyArray<{ readonly name: string, readonly value: string }> | null } | null };

type FooterQueryVariables = Exact<{ [key: string]: never; }>;


type FooterQuery = { readonly site: { readonly siteMetadata: { readonly navLinks: ReadonlyArray<{ readonly name: string, readonly url: string }> | null, readonly socialLinks: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } } | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type IndexPageQueryVariables = Exact<{ [key: string]: never; }>;


type IndexPageQuery = { readonly site: { readonly siteMetadata: { readonly description: string, readonly timezone: string } } | null, readonly allMeeting: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly time_start: string, readonly time_close: string, readonly timezone: string, readonly week_number: number, readonly semester: string, readonly slug: string, readonly image: { readonly alt: string, readonly path: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } } | null }> }, readonly allEvent: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly time_start: string, readonly time_close: string, readonly timezone: string, readonly slug: string, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } }> }, readonly allPublication: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly credit: ReadonlyArray<string>, readonly publication_type: string, readonly publisher: string | null, readonly date: string, readonly slug: string, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } }> } };

type JoinPageQueryVariables = Exact<{ [key: string]: never; }>;


type JoinPageQuery = { readonly site: { readonly siteMetadata: { readonly description: string, readonly timezone: string, readonly socialLinks: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } } | null, readonly allMeeting: { readonly meetings: ReadonlyArray<{ readonly title: string, readonly time_start: string, readonly time_close: string, readonly timezone: string, readonly week_number: number, readonly semester: string, readonly slug: string, readonly tags: ReadonlyArray<string> | null, readonly image: { readonly alt: string, readonly path: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } } | null }> } };

type LayoutMeetingQueryVariables = Exact<{ [key: string]: never; }>;


type LayoutMeetingQuery = { readonly allMeeting: { readonly meetings: ReadonlyArray<{ readonly week_number: number, readonly title: string, readonly semester: string, readonly slug: string }> } };

type MeetingsPageQueryVariables = Exact<{ [key: string]: never; }>;


type MeetingsPageQuery = { readonly allMeeting: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly time_start: string, readonly time_close: string, readonly timezone: string, readonly week_number: number, readonly credit: ReadonlyArray<string>, readonly recording: string | null, readonly tags: ReadonlyArray<string> | null, readonly semester: string, readonly slug: string, readonly credit_profiles: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null>, readonly image: { readonly alt: string, readonly path: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } } | null, readonly slides: { readonly publicURL: string | null } | null }> } };

type MeetingTemplateQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type MeetingTemplateQuery = { readonly meeting: { readonly title: string, readonly time_start: string, readonly time_close: string, readonly timezone: string, readonly week_number: number, readonly credit: ReadonlyArray<string>, readonly location: string | null, readonly live_video_url: string | null, readonly recording: string | null, readonly semester: string, readonly tags: ReadonlyArray<string> | null, readonly credit_profiles: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null>, readonly image: { readonly alt: string, readonly path: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } } | null, readonly slides: { readonly publicURL: string | null } | null, readonly assets: ReadonlyArray<{ readonly base: string, readonly publicURL: string | null }> | null } | null };

type NavQueryVariables = Exact<{ [key: string]: never; }>;


type NavQuery = { readonly site: { readonly siteMetadata: { readonly navLinks: ReadonlyArray<{ readonly name: string, readonly url: string }> | null, readonly navCallToActionLinks: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } } | null };

type PageMarkdownTemplateQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type PageMarkdownTemplateQuery = { readonly pageMarkdown: { readonly title: string, readonly description: string | null, readonly options: { readonly full_width: boolean | null, readonly no_background: boolean | null } | null } | null };

type PublicationsPageQueryVariables = Exact<{ [key: string]: never; }>;


type PublicationsPageQuery = { readonly allPublication: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly credit: ReadonlyArray<string>, readonly publication_type: string, readonly publisher: string | null, readonly date: string, readonly slug: string, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } }> } };

type PublicationTemplateQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type PublicationTemplateQuery = { readonly publication: { readonly title: string, readonly credit: ReadonlyArray<string>, readonly publication_type: string, readonly publisher: string | null, readonly description: string | null, readonly tags: ReadonlyArray<string> | null, readonly iso_date: string, readonly full_date: string, readonly credit_profiles: ReadonlyArray<{ readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | { readonly name: string, readonly handle: string | null, readonly role: string, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null>, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null }, readonly primary_link: { readonly name: string, readonly url: string } | null, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null };

type SeoQueryVariables = Exact<{ [key: string]: never; }>;


type SeoQuery = { readonly site: { readonly siteMetadata: { readonly title: string, readonly description: string, readonly image: string, readonly siteUrl: string, readonly twitterUsername: string | null } } | null };

type SponsorsPageQueryVariables = Exact<{ [key: string]: never; }>;


type SponsorsPageQuery = { readonly allOrg: { readonly nodes: ReadonlyArray<{ readonly name: string, readonly affiliation: string | null, readonly handle: string | null, readonly bio: string | null, readonly role: string, readonly weight: number, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null }> }, readonly allEvent: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly series: string, readonly time_start: string, readonly slug: string, readonly sponsors_profiles: ReadonlyArray<{ readonly name: string, readonly affiliation: string | null, readonly handle: string | null, readonly bio: string | null, readonly role: string, readonly weight: number, readonly profile_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null }, readonly card_image: { readonly background_color: string | null, readonly alt: string | null, readonly foreground: { readonly publicURL: string | null } | null, readonly background: { readonly publicURL: string | null } | null, readonly foreground_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly background_image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly links: ReadonlyArray<{ readonly name: string, readonly url: string }> | null } | null> | null }> } };

type GatsbyNodeQueryVariables = Exact<{ [key: string]: never; }>;


type GatsbyNodeQuery = { readonly allTemplatedPage: { readonly nodes: ReadonlyArray<{ readonly __typename: 'Event', readonly id: string, readonly slug: string, readonly parent: { readonly internal: { readonly contentFilePath: string | null } } | {} | null } | { readonly __typename: 'Meeting', readonly id: string, readonly slug: string, readonly slides: { readonly publicURL: string | null } | null, readonly parent: { readonly internal: { readonly contentFilePath: string | null } } | {} | null } | { readonly __typename: 'PageMarkdown', readonly id: string, readonly slug: string, readonly parent: { readonly internal: { readonly contentFilePath: string | null } } | {} | null } | { readonly __typename: 'Publication', readonly id: string, readonly slug: string, readonly parent: { readonly internal: { readonly contentFilePath: string | null } } | {} | null }> }, readonly allRedirectsJson: { readonly redirects: ReadonlyArray<{ readonly id: string, readonly src: string, readonly dst: string, readonly code: number | null }> } };

type CreateICSQueryVariables = Exact<{ [key: string]: never; }>;


type CreateICSQuery = { readonly allICalendarEvent: { readonly nodes: ReadonlyArray<{ readonly time_start: string, readonly time_close: string, readonly ical: { readonly uid: string, readonly sequence: number, readonly title: string, readonly description: string | null, readonly url: string | null, readonly location: { readonly title: string | null, readonly address: string | null, readonly radius: number | null, readonly geo: { readonly lat: number, readonly lon: number } | null } | null }, readonly discord_event: { readonly update_disabled: boolean, readonly name: string, readonly location: string, readonly description: string | null, readonly image_url: string | null } } | { readonly time_start: string, readonly time_close: string, readonly ical: { readonly uid: string, readonly sequence: number, readonly title: string, readonly description: string | null, readonly url: string | null, readonly location: { readonly title: string | null, readonly address: string | null, readonly radius: number | null, readonly geo: { readonly lat: number, readonly lon: number } | null } | null }, readonly discord_event: { readonly update_disabled: boolean, readonly name: string, readonly location: string, readonly description: string | null, readonly image_url: string | null } }> }, readonly site: { readonly siteMetadata: { readonly title: string } } | null };


}
