type Site implements Node {
  siteMetadata: SiteMetadata!
}

type Link {
  name: String!
  url: String!
}

type SiteMetadata {
  title: String!
  siteUrl: String!
  description: String!
  image: String!
  navLinks: [Link!]
  navCallToActionLinks: [Link!]
  socialLinks: [Link!]
  timezone: String!
}

type ImageAlt {
  path: File! @fileByRelativePath
  alt: String!
}

type Stat {
  name: String!
  value: String!
}

interface TemplatedPage implements Node @dontInfer {
  id: ID!
  slug: String!
}

type ICalendarEventData {
  uid: String!
  sequence: Int!
  title: String!
  description: String
  location: ICalendarLocationData
  url: String
}

type ICalendarLocationData {
  title: String
  address: String
  radius: Float
  geo: ICalendarGeoData
}

type ICalendarGeoData {
  lat: Float!
  lon: Float!
}

type ICalendarDiscordEventData {
  update_disabled: Boolean!
  name: String!
  location: String!
  description: String
  image_url: String
}

interface ICalendarEvent implements Node @dontInfer {
  id: ID!
  ical: ICalendarEventData!
  discord_event: ICalendarDiscordEventData!
  time_start: Date! @dateformat
  time_close: Date! @dateformat
}

type Meeting implements Node & TemplatedPage & ICalendarEvent @dontInfer {
  title: String!
  ical: ICalendarEventData!
  discord_event: ICalendarDiscordEventData!
  time_start: Date! @dateformat
  time_close: Date! @dateformat
  timezone: String!
  week_number: Int!
  credit: [String!]!
  credit_profiles: [Profile]! @link(by: "name", from: "credit")
  featured: Boolean
  location: String
  description: String
  image: ImageAlt
  live_video_url: String
  slides: File @fileByRelativePath
  recording: String
  assets: [File!] @fileByRelativePath
  tags: [String!]
  semester: String!
  slug: String!
}

type Event implements Node & TemplatedPage & ICalendarEvent @dontInfer {
  title: String!
  ical: ICalendarEventData!
  discord_event: ICalendarDiscordEventData!
  time_start: Date! @dateformat
  time_close: Date! @dateformat
  timezone: String!
  series: String!
  credit: [String!]!
  credit_profiles: [Profile]! @link(by: "name", from: "credit")
  sponsors: [String!]
  sponsors_profiles: [Org] @link(by: "name", from: "sponsors")
  location: String
  description: String!
  card_image: CardImage!
  links: [Link!]
  stats: [Stat!]
  slug: String!
}

type Publication implements Node & TemplatedPage @dontInfer {
  title: String!
  credit: [String!]!
  credit_profiles: [Profile]! @link(by: "name", from: "credit")
  publication_type: String!
  publisher: String
  date: Date! @dateformat
  description: String
  card_image: CardImage!
  primary_link: Link
  links: [Link!]
  tags: [String!]
  slug: String!
}

type PageMarkdownOptions {
  full_width: Boolean
  no_background: Boolean
}

type PageMarkdown implements Node & TemplatedPage @dontInfer {
  title: String!
  description: String
  options: PageMarkdownOptions
  slug: String!
}

interface Profile {
  name: String!
  profile_image: File! @fileByRelativePath
  handle: String
  bio: String
  links: [Link!]
  role: String!
  weight: Int!
}

type Admin implements Node & Profile @dontInfer {
  name: String!
  profile_image: File! @fileByRelativePath
  handle: String
  bio: String
  links: [Link!]
  role: String!
  weight: Int!
}

type Helper implements Node & Profile @dontInfer {
  name: String!
  profile_image: File! @fileByRelativePath
  handle: String
  bio: String
  links: [Link!]
  role: String!
  weight: Int!
}

type Alum implements Node & Profile @dontInfer {
  name: String!
  profile_image: File! @fileByRelativePath
  handle: String
  period: String
  work: String
  bio: String
  links: [Link!]
  role: String!
  weight: Int!
}

type Member implements Node & Profile @dontInfer {
  name: String!
  profile_image: File! @fileByRelativePath
  handle: String
  bio: String
  links: [Link!]
  role: String!
  weight: Int!
}

type CardImage {
  foreground: File @fileByRelativePath
  background: File @fileByRelativePath
  foreground_image: File @fileByRelativePath
  background_image: File @fileByRelativePath
  background_color: String
  alt: String
}

type Org implements Node & Profile @dontInfer {
  name: String!
  profile_image: File! @fileByRelativePath
  card_image: CardImage
  affiliation: String # takes precedence over handle
  handle: String
  bio: String
  role: String!
  weight: Int!
  links: [Link!]
  featured: Boolean!
}

type RedirectsJson implements Node @dontInfer {
  src: String!
  dst: String!
  code: Int
}